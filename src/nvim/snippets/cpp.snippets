snippet cp
	#include <iostream>

	int main() {
		std::ios::sync_with_stdio(0);
		std::cin.tie(NULL);

		${0}

		return 0;
	}

snippet rf
	freopen("${0}.in", "r", stdin);
	freopen("$0.out", "w", stdout);

snippet bs_min
	int low = 0, high = N;
	while (low < high) {
		int mid = (low + high) / 2;

		if (is_possible(mid))
			high = mid;
		else
			low = mid + 1;
	}

snippet bs_max
	int low = 0, high = N;
	while (low < high) {
		int mid = (low + high) / 2 + (low + high) % 2;

		if (is_possible(mid))
			low = mid;
		else
			high = mid - 1;
	}

snippet dfs
	void dfs(int node) {
		if (visited[node])
			return;
		visited[node] = 1;

		for (int u : adj[node])
			dfs(u);
	}

snippet dsu
	struct DSU {
		std::vector<int> e;

		DSU(int N) { e.assign(N, -1); }

		int find(int x) { return e[x] < 0 ? x : e[x] = find(e[x]); }
		bool same_set(int x, int y) { return find(x) == find(y); }
		int size(int x) { return -e[find(x)]; }
		bool unite(int x, int y) {
			x = find(x), y = find(y);
			if (x == y)
				return 0;
			if (e[x] > e[y])
				std::swap(x, y);
			e[x] += e[y];
			e[y] = x;
			return 1;
		}
	};
